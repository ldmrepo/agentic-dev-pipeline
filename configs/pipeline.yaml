# 에이전틱 개발 파이프라인 설정

## 🎯 프로젝트 목적

이 설정 파일들은 Claude Code와 에이전틱 개발 파이프라인의 핵심 동작을 정의합니다.

## 📋 기본 파이프라인 설정

pipeline_config:
  name: "Default Agentic Development Pipeline"
  version: "1.0.0"
  
  # 에이전트 설정
  agents:
    planning_agent:
      model: "claude-3-5-sonnet-20241022"
      max_tokens: 4000
      temperature: 0.1
      
    development_agent:
      model: "claude-3-5-sonnet-20241022"
      max_tokens: 8000
      temperature: 0.2
      
    testing_agent:
      model: "claude-3-5-sonnet-20241022"
      max_tokens: 6000
      temperature: 0.1
      
    deployment_agent:
      model: "claude-3-5-sonnet-20241022"
      max_tokens: 4000
      temperature: 0.1

  # 품질 게이트 기준
  quality_gates:
    code_coverage: 85
    security_scan: "zero_critical"
    performance_threshold: "200ms"
    test_pass_rate: 100

  # 실행 제한
  timeouts:
    planning: "30 minutes"
    development: "2 hours"
    testing: "45 minutes"
    deployment: "30 minutes"

## 🔧 도구 허용 목록

allowed_tools:
  file_operations:
    - read_file
    - write_file
    - create_directory
    - delete_file
    - search_files
    
  git_operations:
    - git_status
    - git_add
    - git_commit
    - git_push
    - git_pull
    - git_checkout
    - git_merge
    
  build_tools:
    - npm_install
    - npm_run
    - docker_build
    - docker_run
    - kubectl_apply
    
  testing_tools:
    - jest
    - playwright
    - cypress
    - pytest
    - curl

## 🌐 MCP 서버 통합 설정

mcp_servers:
  required:
    - github
    - filesystem
    - docker
    
  optional:
    - slack
    - jira  
    - prometheus
    - kubernetes

## 📊 모니터링 설정

monitoring:
  metrics:
    - pipeline_execution_time
    - success_rate
    - agent_response_time
    - resource_utilization
    
  alerts:
    pipeline_failure:
      channels: ["slack", "email"]
      severity: "high"
      
    quality_gate_failure:
      channels: ["slack"]
      severity: "medium"
      
    timeout_exceeded:
      channels: ["slack"]
      severity: "medium"

## 🔐 보안 정책

security:
  file_access:
    allowed_paths:
      - "./src/**"
      - "./tests/**"
      - "./docs/**"
      - "./configs/**"
      
    forbidden_paths:
      - ".env*"
      - "secrets/**"
      - "*.key"
      - "*.pem"
      
  network_access:
    allowed_domains:
      - "api.github.com"
      - "registry.npmjs.org"
      - "hub.docker.com"
      
    forbidden_networks:
      - "169.254.169.254/32"  # AWS metadata
      - "10.0.0.0/8"          # Private networks
      
  command_execution:
    allowed_patterns:
      - "git *"
      - "npm *"
      - "docker *"
      - "kubectl *"
      - "terraform *"
      
    forbidden_patterns:
      - "rm -rf *"
      - "dd *"
      - "mkfs*"
      - "fdisk*"

## 🚀 자동화 레벨 설정

automation_levels:
  conservative:
    human_approval_required:
      - file_deletion
      - production_deployment
      - security_changes
      - infrastructure_changes
      
  standard:
    human_approval_required:
      - production_deployment
      - security_changes
      
  aggressive:
    human_approval_required:
      - production_deployment
      
  autonomous:
    human_approval_required: []
    # 주의: 완전 자율 모드는 테스트 환경에서만 사용

## 📝 로깅 설정

logging:
  level: "INFO"
  format: "json"
  
  destinations:
    - type: "file"
      path: "./logs/pipeline.log"
      retention: "30 days"
      
    - type: "console"
      level: "INFO"
      
    - type: "remote"
      endpoint: "https://logs.example.com/api/v1/logs"
      api_key: "${LOG_API_KEY}"

## 🔄 백업 및 복구

backup:
  enabled: true
  schedule: "0 2 * * *"  # 매일 새벽 2시
  
  targets:
    - "./src/**"
    - "./configs/**"
    - "./docs/**"
    - "./.claude/**"
    
  destination: "s3://my-backup-bucket/agentic-pipeline/"
  retention: "90 days"

recovery:
  checkpoints:
    enabled: true
    frequency: "after_each_stage"
    
  auto_recovery:
    enabled: true
    max_attempts: 3
    backoff_strategy: "exponential"
